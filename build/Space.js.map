{"version":3,"file":null,"sources":["../src/Point/Spherical.js","../src/Point/Polar.js","../src/Point/Cartesian.js","../src/Point.js","../src/World.js","../src/Path.js","../src/Group.js","../src/Bezier.js","../src/Polygon.js","../src/Morpher.js","../src/Space.js"],"sourcesContent":["import Cartesian from './Cartesian';\n\n////\n// Spherical\n////\n\nconst Spherical = function (r, phi, theta) {\n    this.r = r || 0;            // distance\n    this.phi = phi || 0;        // polar angle\n    this.theta = theta || 0;    // azimuthal angle\n};\n\n//// Spherical conversions\n\n// Cartesian\n\nSpherical.prototype.x = function () {\n    return this.r * Math.sin(this.theta) * Math.cos(this.phi);\n};\n\nSpherical.prototype.y = function () {\n    return this.r * Math.sin(this.theta) * Math.sin(this.phi);\n};\n\nSpherical.prototype.z = function () {\n    return this.r * Math.cos(this.theta);\n};\n\nSpherical.prototype.toCartesian = function () {\n    return new Cartesian(this.x(), this.y(), this.z());\n};\n\n// Geographical\n// https://vvvv.org/blog/polar-spherical-and-geographic-coordinates\n\nSpherical.prototype.lat = function () {\n    return this.phi - (Math.PI / 2);\n};\n\nSpherical.prototype.lng = function () {\n    return this.theta;\n};\n\nexport default Spherical;\n","import Cartesian from './Cartesian';\n\n////\n// Polar\n////\n\nconst Polar = function (r, phi) {\n    this.r = r || 0;            // distance\n    this.phi = phi || 0;        // polar angle\n};\n\n//// Polar conversions\n\n// Cartesian\n\nPolar.prototype.x = function () {\n    return this.r * Math.cos(this.phi);\n};\n\nPolar.prototype.y = function () {\n    return this.r * Math.sin(this.phi);\n};\n\nPolar.prototype.toCartesian = function () {\n    return new Cartesian(this.x(), this.y());\n};\n\nexport default Polar;\n","import Spherical from './Spherical';\nimport Polar from './Polar';\n\n////\n// Cartesian\n////\n\nconst Cartesian = function (x, y, z) {\n    this.x = x || 0;\n    this.y = y || 0;\n    this.z = z || 0;\n};\n\n// Convert to Spherical\n\nCartesian.prototype.r = function () {\n    // eslint-disable-next-line no-restricted-properties\n    return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2) + Math.pow(this.z, 2));\n};\n\nCartesian.prototype.phi = function () {\n    return Math.atan2(this.y, this.x);\n};\n\nCartesian.prototype.theta = function () {\n    return Math.acos(this.z / this.r());\n};\n\n//@TODO test\nCartesian.prototype.toPolar = function () {\n    return new Polar(this.r(), this.phi());\n};\n\nCartesian.prototype.toSpherical = function () {\n    return new Spherical(this.r(), this.phi(), this.theta());\n};\n\n// Geographical\n// https://vvvv.org/blog/polar-spherical-and-geographic-coordinates\n\nCartesian.prototype.lat = function () {\n    return this.phi() - (Math.PI / 2);\n};\n\nCartesian.prototype.lng = function () {\n    return this.theta();\n};\n\n// Operations\n\nCartesian.prototype.add = function (p) {\n    this.x += p.x;\n    this.y += p.y;\n    this.z += p.z;\n};\n\nCartesian.prototype.substract = function (p) {\n    this.x -= p.x;\n    this.y -= p.y;\n    this.z -= p.z;\n};\n\nCartesian.prototype.multiply = function (p) {\n    this.x *= p.x;\n    this.y *= p.y;\n    this.z *= p.z;\n};\n\n// world operations\n\nCartesian.prototype.scale = function (origin, p) {\n    this.substract(origin);\n    this.multiply(p);\n    this.add(origin);\n};\n\nCartesian.prototype.rotate2D = function (origin, phi) {\n    this.substract(origin);\n    let p = this.toPolar();\n    p.phi += phi;\n    p = p.toCartesian();\n    this.x = p.x;\n    this.y = p.y;\n    this.add(origin);\n};\n\n// operations with primitives\n\nCartesian.prototype.translate = function (x, y, z) {\n    x = x || 0;\n    y = y || 0;\n    z = z || 0;\n    this.x += x;\n    this.y += y;\n    this.z += z;\n};\n\nCartesian.prototype.multiplyBy = function (f) {\n    this.x *= f;\n    this.y *= f;\n    this.z *= f;\n};\n\n// comparasion\n\nCartesian.prototype.equals = function (p) {\n    return ((this.x === p.x) && (this.y === p.y) && (this.z === p.z));\n};\n\n// min, max\n\nCartesian.prototype.min = function (v) {\n    this.x = (this.x > v.x) ? v.x : this.x;\n    this.y = (this.y > v.y) ? v.y : this.y;\n};\n\nCartesian.prototype.max = function (v) {\n    this.x = (this.x < v.x) ? v.x : this.x;\n    this.y = (this.y < v.y) ? v.y : this.y;\n};\n\n// exports\n\nCartesian.prototype.clone = function () {\n    return new Cartesian(this.x, this.y, this.z);\n};\n\nCartesian.prototype.toArray = function () {\n    return [this.x, this.y, this.z];\n};\n\n// static methods\n\nCartesian.create = function (x, y, z) {\n    if (typeof x === 'object' && typeof x.clone === 'function') {\n        return x;\n    }\n    return new Cartesian(x, y, z);\n};\n\nCartesian.fromArray = function (a) {\n    // throw Exception if not a valid array\n    if (a.length !== 3) {\n        throw Error('Array not divisable by 3');\n    }\n    return new Cartesian(a[0], a[1], a[2]);\n};\n\nexport default Cartesian;\n","import Cartesian from './Point/Cartesian';\nimport Spherical from './Point/Spherical';\nimport Polar from './Point/Polar';\n\nconst Point = {\n    Cartesian,\n    Spherical,\n    Polar\n};\n\nexport default Point;\n","const World = function (origin) {\n    origin = origin || null;\n\n    if (!origin || typeof origin.clone !== 'function') {\n        throw Error('World constructor requires a Space.Point.Cartesian instance');\n    }\n\n    this.origin = function () {\n        return origin.clone();\n    };\n\n    this.locate = function (point) {\n        point.add(origin);\n        return point;\n    };\n};\n\nexport default World;\n","import Point from './Point';\nimport World from './World';\n\nconst Path = function (x, y, z) {\n    const origin = Point.Cartesian.create(x, y, z);\n    World.call(this, origin);\n\n    this.points = [];\n};\n\nPath.prototype = Object.create(World.prototype);\nPath.prototype.constructor = Path;\n\n// push to points, consider closed\nPath.prototype.addPoint = function (v) {\n    if (this.isClosed()) {\n        this.points.splice(this.points.length - 1, 0, v);\n    } else {\n        this.points.push(v);\n    }\n};\n\n// replace (or set) a point at a specified index, updates closed index, doe NOT locate point to origin\nPath.prototype.replace = function (index, v) {\n    const closed = this.isClosed();\n    if (closed) {\n        this.open();\n    }\n    this.points[index] = v;\n    if (closed) {\n        this.close();\n    }\n};\n\n// add coords relative to origin\nPath.prototype.add = function (x, y, z) {\n    const v = this.locate(Point.Cartesian.create(x, y, z));\n    this.addPoint(v);\n};\n\n// relatve coords from last point\nPath.prototype.progress = function (x, y, z) {\n    if (!this.points.length) {\n        throw new Error('Path error: cannot progress on an empty path');\n    }\n    const v = Point.Cartesian.create(x, y, z);\n    v.add(this.last());\n    this.addPoint(v);\n};\n\n// replace (or set) a point at a specified index, updates closed index\nPath.prototype.set = function (index, x, y, z) {\n    this.replace(index, this.locate(Point.Cartesian.create(x, y, z)));\n};\n\n// get a point for index\nPath.prototype.get = function (index) {\n    return (this.points[index] !== undefined) ? this.points[index] : null;\n};\n\n// get last point\nPath.prototype.last = function () {\n    return (this.points.length) ? this.points[this.points.length - 1] : null;\n};\n\n// get first point\nPath.prototype.first = function () {\n    return (this.points.length) ? this.points[0] : null;\n};\n\n// get  adjascent point for index\nPath.prototype.prev = function (index) {\n    if (!this.isClosed()) {\n        return this.get(index - 1);\n    }\n    // if closed the last item in array === first\n    return (index === 0) ? this.get(this.points.length - 2) : this.get(index - 1);\n};\n\n// get descendant point for index\nPath.prototype.next = function (index) {\n    if (!this.isClosed()) {\n        return this.get(index + 1);\n    }\n    return (index === this.points.length - 1) ? this.first() : this.get(index + 1);\n};\n\n// open path\nPath.prototype.open = function () {\n    if (this.isClosed()) {\n        this.points.splice(-1, 1);\n    }\n    return this.last();\n};\n\n// close path\nPath.prototype.close = function () {\n    if (this.points.length && !this.isClosed()) {\n        this.points.push(this.first());\n    }\n    return this.last();\n};\n\n// check if path is closed\nPath.prototype.isClosed = function () {\n    return (this.points.length > 1 && this.last() === this.first());\n};\n\n// returns this.points length, excluding last element when path is losed\nPath.prototype.length = function () {\n    return (this.isClosed()) ? this.points.length - 1 : this.points.length;\n};\n\n// bounding box\n//@TODO\nPath.prototype.bounds = function () {\n    if (!this.points.length) {\n        return null;\n    }\n    const min = this.first().clone();\n    const max = this.first().clone();\n    const length = this.length();\n    for (let i = 0; i < length; i += 1) {\n        min.min(this.points[i]);\n        max.max(this.points[i]);\n    }\n    //TODO point.between()\n    const center = min.clone();\n    center.translate((max.x - min.x) / 2, (max.y - min.y) / 2, (max.z - min.z) / 2);\n    return { min, max, center };\n};\n\n// rotate path\nPath.prototype.toArray = function () {\n    const arr = [];\n    const length = this.points.length;\n    for (let i = 0; i < length; i += 1) {\n        arr.push(this.points[i].toArray());\n    }\n    return arr;\n};\n\n// could be bundled to .transform('translate' x,y,z) ?\n\n// translate path\nPath.prototype.translate = function (x, y, z) {\n    let i;\n    const v = Point.Cartesian.create(x, y, z);\n    const length = this.length();\n    for (i = 0; i < length; i += 1) {\n        this.points[i].add(v);\n    }\n};\n\n// scale path\nPath.prototype.scale = function (x, y, z) {\n    let i;\n    const v = Point.Cartesian.create(x, y, z);\n    const length = this.length();\n    for (i = 0; i < length; i += 1) {\n        this.points[i].scale(this.origin(), v);\n    }\n};\n\n// rotate path\nPath.prototype.rotate2D = function (rad) {\n    let i;\n    const length = this.length();\n    for (i = 0; i < length; i += 1) {\n        this.points[i].rotate2D(this.origin(), rad);\n    }\n};\n\nexport default Path;\n","import Cartesian from './Point/Cartesian';\n\n////\n// Group is a Group of Cartesian Points\n////\n\nconst Group = function (x, y, z) {\n    Cartesian.call(this, x, y, z);\n\n    // control points\n    this.members = [];\n};\n\nGroup.prototype = Object.create(Cartesian.prototype);\nGroup.prototype.constructor = Group;\n\n// Operations\n\nGroup.prototype.add = function (p) {\n    Cartesian.prototype.add.call(this, p);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].add(p);\n    }\n};\n\nGroup.prototype.substract = function (p) {\n    Cartesian.prototype.substract.call(this, p);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].substract(p);\n    }\n};\n\nGroup.prototype.multiply = function (p) {\n    Cartesian.prototype.multiply.call(this, p);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].multiply(p);\n    }\n};\n\n// world operations\n\nGroup.prototype.scale = function (origin, p) {\n    Cartesian.prototype.scale.call(this, origin, p);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].scale(origin, p);\n    }\n};\n\nGroup.prototype.rotate2D = function (origin, phi) {\n    Cartesian.prototype.rotate2D.call(this, origin, phi);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].rotate2Dy(origin, phi);\n    }\n};\n\n// operations with primitives\n\nGroup.prototype.translate = function (x, y, z) {\n    Cartesian.prototype.translate.call(this, x, y, z);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].translate(x, y, z);\n    }\n};\n\nGroup.prototype.multiplyBy = function (f) {\n    Cartesian.prototype.multiplyBy.call(this, f);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        this.members[i].multiplyBy(f);\n    }\n};\n\n// exports\n\nGroup.prototype.clone = function () {\n    const clone = new Group(this.x, this.y, this.z);\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        clone.members[i] = this.members[i].clone();\n    }\n    return clone;\n};\n\nGroup.prototype.toArray = function () {\n    const arr = [this.x, this.y, this.z];\n    const length = this.members.length;\n    for (let i = 0; i < length; i += 1) {\n        arr.push(this.members[i].x, this.members[i].y, this.members[i].z);\n    }\n    return arr;\n};\n\n// static methods\n\n// returns new instance\nGroup.create = function (x, y, z) {\n    //is point like\n    if (typeof x === 'object' && typeof x.clone === 'function') {\n        // is a a group already\n        if (typeof x.members !== 'undefined') {\n            return x;\n        }\n        // is a cartesian point\n        return new Group(x.x, x.y, x.z);\n    }\n    return new Group(x, y, z);\n};\n\n// returns new instance\nGroup.fromArray = function (a) {\n    let fragment;\n\n    // Note: Cartesian.fromArray ensures strict check for a.length === 3 ant throws Exception\n\n    // point\n    fragment = a.splice(0, 3);\n    let point = Cartesian.fromArray(fragment);\n    const group = Group.create(point);\n\n    // members\n    while (a.length) {\n        fragment = a.splice(0, 3);\n        point = Cartesian.fromArray(fragment);\n        group.members.push(point);\n    }\n    return group;\n};\n\n\nexport default Group;\n","import Point from './Point';\nimport Group from './Group';\n\n/**\n * Rob Spencer's algorithm\n * @see http://scaledinnovation.com/analytics/splines/aboutSplines.html\n * @TODO angles. Angles from tangent (positive, negative) It might be worth to check if we can use Point.polar ops in general\n * @TODO tension as absolute progression value (pixels) if tension is an array add instead multiply\n * function bezier(prev, curr, next, [100, 50], [45, -25])\n */\nconst smoothPoint = function (prev, curr, next, tension) {\n\n    //@TODO, this is a temporary workaround\n    curr = Group.create(curr); //expensive\n\n    if (!next || !prev) {\n        return curr;\n    }\n\n    //  prev.x,prev.y,curr.x,curr.y are the coordinates of the end (knot) pts of this segment\n    //  next.x,next.y is the next knot -- not connected here but needed to calculate p2\n    //  p1 is the control curr calculated here, from curr.x back toward prev.x.\n    //  p2 is the next control curr, calculated here and returned to become the\n    //  next segment's p1.\n    //  t is the 'tension' which controls how far the control currs spread.\n\n    //  Scaling factors: distances from this knot to the previous and following knots\n\n    /* eslint-disable no-restricted-properties */\n    const d01 = Math.sqrt(Math.pow(curr.x - prev.x, 2) + Math.pow(curr.y - prev.y, 2));\n    const d12 = Math.sqrt(Math.pow(next.x - curr.x, 2) + Math.pow(next.y - curr.y, 2));\n    /* eslint-enable no-restricted-properties */\n\n    const fa = tension * (d01 / (d01 + d12)); // scaling factor for triangle Ta\n    const fb = tension - fa; // ditto for Tb, simplifies to fb=t-fa\n\n    const p1x = curr.x + (fa * (prev.x - next.x)); // x2-x0 is the width of triangle T\n    const p1y = curr.y + (fa * (prev.y - next.y)); // y2-y0 is the height of T\n\n    const p2x = curr.x - (fb * (prev.x - next.x));\n    const p2y = curr.y - (fb * (prev.y - next.y));\n\n    //return [new curr.Cartesian(p1x, p1y), new curr.Cartesian(p2x, p2y)];\n\n    curr.members[0] = new Point.Cartesian(p1x, p1y);\n    curr.members[1] = new Point.Cartesian(p2x, p2y);\n\n    // Everything else in the code is just bookkeeping.\n    // In these sketches we found two control points, but for different bezier curves:\n    //  - control point p1 (Figure 4) is needed to draw the left bezier (red in Figures 1 & 2)\n    //  - and p2 is needed to draw the right (orange) bezier.\n    // This just means that we have to calculate all of the control points\n    // (or at least those a knot fore and aft of where we are) before drawing.\n    // Closed curves need the control points at the \"beginning\" and \"end\" points (wherever you start and end),\n    // more bookkeeping.\n    // But the result is a simple, fast bezier spline routine with only one parameter to adjust the curvature.\n\n    // Note in the demo that when t=0 the curves become straight lines connecting the knot points,\n    // and when t=1 the curves are \"too curvy\" for the open zigzag curve,\n    // but actually for the square (lower left), t=1 makes a nice \"rounded square\" that might be a useful shape.\n    // There is no upper bound to t, but above t=1 you're almost guaranteed to get distracting cusps and loops.\n    // For that matter, t can be negative, which is great for drawing knots.\n\n    return curr;\n};\n\nconst smoothPath = function (path, curviness) {\n    //@TODO, only sections params\n    //@TODO, cache handles\n    let bezier;\n    const length = (path.isClosed()) ? path.points.length - 1 : path.points.length;\n    for (let i = 0; i < length; i += 1) {\n        bezier = smoothPoint(path.prev(i), path.get(i), path.next(i), curviness);\n        path.replace(i, bezier);\n    }\n};\n\nexport default {\n    smoothPath,\n    smoothPoint\n};\n","import Path from './Path';\nimport Point from './Point';\nimport Bezier from './Bezier';\n\nconst TWO_PI = Math.PI * 2;\nconst HALF_PI = Math.PI / 2;\n\nconst cartesianFromPolar = function (radius, delta) {\n    let point = new Point.Polar(radius, delta);\n    point = point.toCartesian();\n    return point;\n};\n\n////\n// Line\n////\n\nconst Line = function (from, to, segments, origin) {\n    const path = new Path(origin);\n    path.add(from);\n    path.add(to);\n    this.path = path;\n\n    if (typeof segments === 'number') {\n        this.segmentize(segments);\n    }\n};\n\n// TODO maybe this is a good general path method. if so it needs to consider open and close\nLine.prototype.segmentize = function (segments) {\n    const last = this.path.last();\n    const length = this.path.length();\n\n    // TODO closed lines are possible as they inherit from path\n    const segm = last.clone();\n    segm.substract(this.path.first());\n    segm.multiplyBy(1 / segments);\n\n    // remove everything except first element, keep instance\n    this.path.points.splice(1, length);// since it's a line horignal lengt must be > 1\n\n    const len = segments - 2;// first, last\n    for (let i = 0; i < len; i += 1) {\n        this.path.progress(segm.clone());\n    }\n\n    this.path.addPoint(last);\n};\n\n////\n// Polygon\n////\n\nconst Polygon = function (segments, radius, origin) {\n    const path = new Path(origin);\n    let i = 0;\n\n    //@see http://stackoverflow.com/a/7198179\n    const delta = TWO_PI / segments;\n\n    while (i < segments) {\n        const p = new Point.Polar(radius, i * delta);\n        const c = p.toCartesian();\n        path.add(c.x, c.y);\n        i += 1;\n    }\n    path.close();\n    this.path = path;\n};\n\n////\n// Rectangle\n////\n\nconst Rectangle = function (width, height, origin) {\n    const path = new Path(origin);\n\n    path.add(-width / 2, height / 2);\n    path.progress(width, 0);\n    path.progress(0, -height);\n    path.progress(-width, 0);\n    path.close();\n\n    this.path = path;\n};\n\n////\n// Star\n////\n\nconst Star = function (segments, outerRadius, innerRadius, origin) {\n    const path = new Path(origin);\n\n    //@see http://stackoverflow.com/a/7198179\n    const rad0 = HALF_PI;\n    const delta = TWO_PI / segments;\n    let _delta;\n    let inner;\n    let outer;\n    let i = 0;\n\n    while (i < segments) {\n        _delta = (i * delta) - rad0;\n        outer = cartesianFromPolar(outerRadius, _delta);\n        path.add(outer.x, outer.y);\n\n        if (i <= segments - 1) {\n            _delta += delta / 2;\n            inner = cartesianFromPolar(innerRadius, _delta);\n            path.add(inner.x, inner.y);\n        }\n        i += 1;\n    }\n    path.close();\n    this.path = path;\n};\n\n// apply bezier to outer points only\nStar.prototype.flower = function (tension) {\n    let bezier;\n    const length = this.path.points.length - 1;\n    for (let i = 0; i < length; i += 2) {\n        bezier = Bezier.smoothPoint(this.path.prev(i), this.path.get(i), this.path.next(i), tension);\n        this.path.replace(i, bezier);\n    }\n};\n\n// apply bezier to outer points only\nStar.prototype.seaStar = function (tension) {\n    let bezier;\n    const length = this.path.points.length - 1;\n    for (let i = 1; i < length; i += 2) {\n        bezier = Bezier.smoothPoint(this.path.prev(i), this.path.get(i), this.path.next(i), tension);\n        this.path.replace(i, bezier);\n    }\n};\n\n////\n// Cog\n////\n\nconst Cog = function (segments, outerRadius, innerRadius, origin) {\n    const path = new Path(origin);\n\n    //@TODO, sharable constant\n    // 5 segments > 10 outer points > 10 inner points\n    const rad0 = HALF_PI;\n    const delta = TWO_PI / segments;\n    const _innerDelta = delta - (delta / 2);\n    let _delta;\n    let inner;\n    let outer;\n    let i = 0;\n\n    while (i < segments) {\n        _delta = (i * delta) - rad0;\n        outer = [\n            cartesianFromPolar(outerRadius, _delta + _innerDelta),\n            cartesianFromPolar(outerRadius, _delta + (2 * _innerDelta))\n        ];\n        //outer\n        path.add(outer[0].x, outer[0].y);\n        path.add(outer[1].x, outer[1].y);\n        // inner\n        _delta += delta / 2;\n        inner = [\n            cartesianFromPolar(innerRadius, _delta + _innerDelta),\n            cartesianFromPolar(innerRadius, _delta + (2 * _innerDelta))\n        ];\n        path.add(inner[0].x, inner[0].y);\n        path.add(inner[1].x, inner[1].y);\n\n        i += 1;\n    }\n    path.close();\n    this.path = path;\n};\n\n// apply bezier to outer points only\n// Cog.prototype.flower = function (tension) {\n//     //@TODO\n// };\n\n// // apply bezier to outer points only\n// Cog.prototype.seaStar = function (tension) {\n//     //@TODO\n// };\n\nexport {\n    Line,\n    Polygon,\n    Rectangle,\n    Star,\n    Cog\n};\n","import Group from './Group';\nimport Point from './Point';\nimport Path from './Path';\n\n// TODO center view\n\n/**\n * Applies a step transform deeply to a group\n * our normal poitn.multiply cannot be used here as it would not deep transorm mebers against reference memebers,\n * only members against the main coordinates\n *\n * srcPath and targPath need to have the same length TODO: handle segment normalization\n * Ervery srcPath items will be first normalized against it's targPath partner,\n *      it will be always a group\n *      it will have n members, where n is the max of either length\n *      member indexes who dont exist in src will be created as point with the same coordinates as src\n */\nconst apply = function (point, reference, operator) {\n    point.x += (operator * reference.x);\n    point.y += (operator * reference.y);\n    point.z += (operator * reference.z);\n\n    if (typeof point.members !== 'undefined') {\n        const length = point.members.length;\n        for (let i = 0; i < length; i += 1) {\n            apply(point.members[i], reference.members[i], operator);\n        }\n    }\n};\n\n/**\n * Comuptes a transformation unit group for a single src group vin relation to it's targ gruop based on the steps\n * src and targ need to be normalized groups, i.e. have the same member length\n */\nconst computeUnit = function (src, targ, steps) {\n    let x;\n    let y;\n    let z;\n\n    x = (targ.x - src.x) / steps;\n    y = (targ.y - src.y) / steps;\n    z = (targ.z - src.z) / steps;\n    const unit = new Group(x, y, z);\n\n    const length = src.members.length;\n    for (let i = 0; i < length; i += 1) {\n        x = (targ.members[i].x - src.members[i].x) / steps;\n        y = (targ.members[i].y - src.members[i].y) / steps;\n        z = (targ.members[i].z - src.members[i].z) / steps;\n        unit.members[i] = new Point.Cartesian(x, y, z);\n    }\n    src.unit = unit;\n    return unit;\n};\n\nconst normalizeGroup = function (src, targ) {\n    const length = (targ.members.length > src.members.length) ? targ.members.length : src.members.length;\n    for (let i = 0; i < length; i += 1) {\n        if (typeof src.members[i] === 'undefined') {\n            src.members[i] = new Point.Cartesian(src.x, src.y, src.z);\n        }\n        if (typeof targ.members[i] === 'undefined') {\n            targ.members[i] = new Point.Cartesian(targ.x, targ.y, targ.z);\n        }\n    }\n    return [src, targ];\n};\n\n/**\n * Morper creates a new draw path (always path of groups) from a srcpath and normalizes it against targPath,\n * A computed array of computed \"unit\" groups maps against this path. Every unit contains\n *\n * targPath and srcPath need to be paths\n *      they must have the same length(),\n *      they can be open or closed\n */\n\nconst Morpher = function (srcPath, targPath, steps) {\n    this.src = new Path(srcPath.origin());\n    this.targ = new Path(targPath.origin());\n    this.units = [];\n\n    // TODO deal with origin for maps, and different origins for target and path\n    const length = srcPath.length();\n\n    for (let i = 0; i < length; i += 1) {\n        this.compute(srcPath.points[i], targPath.points[i], steps);\n    }\n\n    if (targPath.isClosed()) {\n        this.src.close();\n    }\n\n    this.count = 0;\n    this.steps = steps;\n    this.direction = 1;\n};\n\n/**\n * normalize src vs targ and compute respective unit\n */\nMorpher.prototype.compute = function (src, targ, steps) {\n    const s = Group.create(src);\n    const t = Group.create(targ);\n\n    const g = normalizeGroup(s, t);\n    this.src.add(g[0]);\n    this.targ.add(g[1]);\n\n    const unit = computeUnit(g[0], g[1], steps);\n    this.units.push(unit);\n};\n\n/**\n * Apply forward transformation to single item\n */\nMorpher.prototype.next = function () {\n    //return;//dev\n    if (this.count >= this.steps) {\n        this.reverse();\n        return false;\n    }\n\n    const length = this.src.length();//TODO global?\n    let item;\n    for (let i = 0; i < length; i += 1) {\n        item = this.src.get(i);\n        apply(item, item.unit, 1);\n    }\n\n    this.count += 1;\n    return true;\n};\n\n/**\n * Apply backward transformation to single item\n */\nMorpher.prototype.prev = function () {\n    if (this.count <= 0) {\n        this.reverse();\n    }\n\n    const length = this.src.length();//TODO global?\n    let item;\n    for (let i = 0; i < length; i += 1) {\n        item = this.src.get(i);\n        apply(item, item.unit, -1);\n    }\n\n    this.count -= 1;\n    return true;\n};\n\n/**\n * progress transformation to next step, based on this.direction\n */\nMorpher.prototype.progress = function () {\n    if (this.direction > 0) {\n        this.next();\n        return;\n    }\n    this.prev();\n};\n\n/**\n * checks if a transformation progress is finished\n */\nMorpher.prototype.finished = function () {\n    if (this.direction > 0) {\n        return this.count === this.steps;\n    }\n    return this.count === 0;\n};\n\n/**\n * reverse progress direction\n */\nMorpher.prototype.reverse = function () {\n    this.direction *= -1;\n};\n\nexport default Morpher;\n","import Point from './Point';\nimport Path from './Path';\nimport Group from './Group';\nimport * as Polygons from './Polygon';\nimport Bezier from './Bezier';\nimport Morpher from './Morpher';\n\nconst Module = {\n    Point,\n    Path,\n    Group,\n    Bezier,\n    Morpher\n};\n\n// hm...\nObject.keys(Polygons).forEach((key) => {\n    Module[key] = Polygons[key];\n});\n\nexport default Module;\n"],"names":["Spherical","r","phi","theta","prototype","x","Math","sin","cos","y","z","toCartesian","Cartesian","lat","PI","lng","Polar","sqrt","pow","atan2","acos","toPolar","toSpherical","add","p","substract","multiply","scale","origin","rotate2D","translate","multiplyBy","f","equals","min","v","max","clone","toArray","create","fromArray","a","length","Error","Point","World","locate","point","Path","call","points","Object","constructor","addPoint","isClosed","splice","push","replace","index","closed","open","close","progress","last","set","get","undefined","first","prev","next","bounds","i","center","arr","rad","Group","members","rotate2Dy","fragment","group","smoothPoint","curr","tension","d01","d12","fa","fb","p1x","p1y","p2x","p2y","smoothPath","path","curviness","bezier","TWO_PI","HALF_PI","cartesianFromPolar","radius","delta","Line","from","to","segments","segmentize","segm","len","Polygon","c","Rectangle","width","height","Star","outerRadius","innerRadius","rad0","_delta","inner","outer","flower","Bezier","seaStar","Cog","_innerDelta","apply","reference","operator","computeUnit","src","targ","steps","unit","normalizeGroup","Morpher","srcPath","targPath","units","compute","count","direction","s","t","g","reverse","item","finished","Module","keys","Polygons","forEach","key"],"mappings":"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"}